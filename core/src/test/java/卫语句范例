public class K{
public Result<PageVO> queryBindRules(PageForm<PdRuleProductForm> form) {
        LOGGER.info("产品管理 组件配置 - queryBindRules 参数:{}",JSON.toJSON(form));
        ValidateUtils.notNull(form, HeilCode.E_400, "productId不能为空");
        ValidateUtils.notNull(form.getForm().getProductId(),HeilCode.E_400,"productId不能为空");
        ValidateUtils.notNull(form.getForm().getClassify(),HeilCode.E_400,"classify不能为空");
        BuzTypeEnum buzTypeEnum = BuzTypeEnum.getByIndex(form.getForm().getClassify());
        ValidateUtils.notNull(buzTypeEnum,HeilCode.E_400,"不支持当前业务类型");
        //1、这里通过引入开关控制调用新重构代码
        boolean switchEnable = configParamsFacade.getValueByParamKey("feeRuleProductLinkEnable",Boolean.class);
        if(switchEnable){
            QueryLinkContext context = QueryLinkContext.builder()
                    .yanbaoRuleFacade(yanbaoRuleFacade).commonComponent(commonComponent)
                    .pdRuleProductService(pdRuleProductService).serFinRuleFacade(serFinRuleFacade)
                    .form(form).build();
            QueryLinkHandlerFactory.create(buzTypeEnum).execute(context);
            return Result.suc(PageVO.newInstance(form.getDraw(),context.getCount(),context.getVoList()));
        }
        // 2、下面是最原始的业务代码
        switch (buzTypeEnum) {
            case SER_FIN_RULE:
                List<SerFinRule> serFinRules = pdRuleProductService.querySerFinRules(form);
                if (CollectionsTools.isEmpty(serFinRules)) {
                    return Result.failInEmptyRecord(null);
                }
                List<SerFinRuleVo> serFinRuleVos = new SerFinRuleVoConvertor().convertList(serFinRules);
                serFinRuleFacade.formatSerFinRule(serFinRules, serFinRuleVos);
                int serFinRulesCount = pdRuleProductService.querySerFinRulesCount(form);
                commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.SER_FIN_RULE.getIndex(),serFinRuleVos),
                        rule -> Integer.valueOf(rule.getRuleSeq()),(rule, tags) -> rule.setTags(tags));
                LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(serFinRuleVos));
                return Result.suc(new PageVO<>(form.getDraw(),serFinRulesCount,serFinRuleVos));

            case RATE_RULE:
                List<RateRule> rateRules = pdRuleProductService.queryRateRules(form);
                List<RateRuleVo> rateRuleVos = new RateRuleVoConvertor().convertList(rateRules);

                int count = pdRuleProductService.queryRateRulesCount(form);
                commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.RATE_RULE.getIndex(),rateRuleVos),
                        rule -> Integer.valueOf(rule.getRuleSeq()),(rule, tags) -> rule.setTags(tags));
                LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(rateRuleVos));
                return Result.suc(new PageVO<>(form.getDraw(),count,rateRuleVos));
            case GPS_RULE:
                List<GpsRule> gpsRules = pdRuleProductService.queryGpsRules(form);
                List<GpsRuleVo> gpsRuleVos = new GpsRuleVoConvertor().convertList(gpsRules);
                gpsRuleFacade.formatGpsRuleVo(gpsRuleVos);
                int gpsCount = pdRuleProductService.queryGpsRulesCount(form);
                commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.GPS_RULE.getIndex(),gpsRuleVos),
                        rule -> Integer.valueOf(rule.getRuleSeq()),(rule, tags) -> rule.setTags(tags));
                LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(gpsRuleVos));
                return Result.suc(new PageVO<>(form.getDraw(), gpsCount, gpsRuleVos));
            case INSURANSE_SECOND_YEAR:
                form.getForm().setYanBaoClassify(2);
                List<YanbaoRule> yanbaoRules = pdRuleProductService.queryYanbaoRules(form);
                List<YanbaoRuleVo> yanbaoRuleVos = new YanbaoRuleVoConvertor().convertList(yanbaoRules);
                int yanbaoCount = pdRuleProductService.queryYanbaoRulesCount(form);
                yanbaoRuleFacade.formatYanbaoRules(yanbaoRules,yanbaoRuleVos);
                commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.INSURANSE_SECOND_YEAR.getIndex(),yanbaoRuleVos),
                        rule -> Integer.valueOf(rule.getRuleSeq()),(rule, tags) -> rule.setTags(tags));
                LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(yanbaoRuleVos));
                return Result.suc(new PageVO<>(form.getDraw(), yanbaoCount, yanbaoRuleVos));
            case INSURANSE_THIRD_YEAR:
                form.getForm().setYanBaoClassify(3);
                List<YanbaoRule> yanbaoRules3 = pdRuleProductService.queryYanbaoRules(form);
                List<YanbaoRuleVo> yanbaoRuleVos3 = new YanbaoRuleVoConvertor().convertList(yanbaoRules3);
                int yanbaoRuleCount = pdRuleProductService.queryYanbaoRulesCount(form);
                yanbaoRuleFacade.formatYanbaoRules(yanbaoRules3, yanbaoRuleVos3);
                commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.INSURANSE_THIRD_YEAR.getIndex(),yanbaoRuleVos3),
                        rule -> Integer.valueOf(rule.getRuleSeq()),(rule, tags) -> rule.setTags(tags));
                LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(yanbaoRuleVos3));
                return Result.suc(new PageVO<>(form.getDraw(), yanbaoRuleCount, yanbaoRuleVos3));
            case ACCOUNT_RULE:
                List<AccountRule> accountRules = pdRuleProductService.queryAccountRules(form);
                List<AccountRuleVo> accountRuleVos = new AccountRuleVoConvertor().convertList(accountRules);
                int accountCount = pdRuleProductService.queryGpsRulesCount(form);
                commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.ACCOUNT_RULE.getIndex(),accountRuleVos),
                        rule -> Integer.valueOf(rule.getRuleSeq()),(rule, tags) -> rule.setTags(tags));
                LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(accountRuleVos));
                return Result.suc(new PageVO<>(form.getDraw(), accountCount, accountRuleVos));
        }
        return Result.suc(new PageVO<>(form.getDraw(), 0, null));
    }

    public Result<PageVO> queryBindRule(PageForm<PdRuleProductForm> form) {
        LOGGER.info("产品管理 组件配置 - queryBindRules 参数:{}", JSON.toJSON(form));
        ValidateUtils.notNull(form, HeilCode.E_400, "productId不能为空");
        ValidateUtils.notNull(form.getForm().getProductId(), HeilCode.E_400, "productId不能为空");
        ValidateUtils.notNull(form.getForm().getClassify(), HeilCode.E_400, "classify不能为空");
        BuzTypeEnum buzTypeEnum = BuzTypeEnum.getByIndex(form.getForm().getClassify());
        ValidateUtils.notNull(buzTypeEnum, HeilCode.E_400, "不支持当前业务类型");
        // 1、这里通过引入开关控制调用新重构代码
        boolean switchEnable = configParamsFacade.getValueByParamKey("feeRuleProductLinkEnable", Boolean.class);

        if (buzTypeEnum == SER_FIN_RULE) {
            List<SerFinRule> serFinRules = pdRuleProductService.querySerFinRules(form);
            if (CollectionsTools.isEmpty(serFinRules)) {
                return Result.failInEmptyRecord(null);
            }
            List<SerFinRuleVo> serFinRuleVos = new SerFinRuleVoConvertor().convertList(serFinRules);
            serFinRuleFacade.formatSerFinRule(serFinRules, serFinRuleVos);
            int serFinRulesCount = pdRuleProductService.querySerFinRulesCount(form);
            commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.SER_FIN_RULE.getIndex(), serFinRuleVos), rule -> Integer.valueOf(rule.getRuleSeq()), (rule, tags) -> rule.setTags(tags));
            LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(serFinRuleVos));
            return Result.suc(new PageVO<>(form.getDraw(), serFinRulesCount, serFinRuleVos));
        } else if (buzTypeEnum == RATE_RULE) {
            List<RateRule> rateRules = pdRuleProductService.queryRateRules(form);
            List<RateRuleVo> rateRuleVos = new RateRuleVoConvertor().convertList(rateRules);
            int count = pdRuleProductService.queryRateRulesCount(form);
            commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.RATE_RULE.getIndex(), rateRuleVos), rule -> Integer.valueOf(rule.getRuleSeq()), (rule, tags) -> rule.setTags(tags));
            LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(rateRuleVos));
            return Result.suc(new PageVO<>(form.getDraw(), count, rateRuleVos));
        } else if (buzTypeEnum == GPS_RULE) {
            List<GpsRule> gpsRules = pdRuleProductService.queryGpsRules(form);
            List<GpsRuleVo> gpsRuleVos = new GpsRuleVoConvertor().convertList(gpsRules);
            gpsRuleFacade.formatGpsRuleVo(gpsRuleVos);
            int gpsCount = pdRuleProductService.queryGpsRulesCount(form);
            commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.GPS_RULE.getIndex(), gpsRuleVos), rule -> Integer.valueOf(rule.getRuleSeq()), (rule, tags) -> rule.setTags(tags));
            LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(gpsRuleVos));
            return Result.suc(new PageVO<>(form.getDraw(), gpsCount, gpsRuleVos));
        } else if (buzTypeEnum == INSURANSE_SECOND_YEAR) {
            form.getForm().setYanBaoClassify(2);
            List<YanbaoRule> yanbaoRules = pdRuleProductService.queryYanbaoRules(form);
            List<YanbaoRuleVo> yanbaoRuleVos = new YanbaoRuleVoConvertor().convertList(yanbaoRules);
            int yanbaoCount = pdRuleProductService.queryYanbaoRulesCount(form);
            yanbaoRuleFacade.formatYanbaoRules(yanbaoRules, yanbaoRuleVos);
            commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.INSURANSE_SECOND_YEAR.getIndex(), yanbaoRuleVos), rule -> Integer.valueOf(rule.getRuleSeq()), (rule, tags) -> rule.setTags(tags));
            LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(yanbaoRuleVos));
            return Result.suc(new PageVO<>(form.getDraw(), yanbaoCount, yanbaoRuleVos));
        } else if (buzTypeEnum == INSURANSE_THIRD_YEAR) {
            form.getForm().setYanBaoClassify(3);
            List<YanbaoRule> yanbaoRules3 = pdRuleProductService.queryYanbaoRules(form);
            List<YanbaoRuleVo> yanbaoRuleVos3 = new YanbaoRuleVoConvertor().convertList(yanbaoRules3);
            int yanbaoRuleCount = pdRuleProductService.queryYanbaoRulesCount(form);
            yanbaoRuleFacade.formatYanbaoRules(yanbaoRules3, yanbaoRuleVos3);
            commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.INSURANSE_THIRD_YEAR.getIndex(), yanbaoRuleVos3), rule -> Integer.valueOf(rule.getRuleSeq()), (rule, tags) -> rule.setTags(tags));
            LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(yanbaoRuleVos3));
            return Result.suc(new PageVO<>(form.getDraw(), yanbaoRuleCount, yanbaoRuleVos3));
        } else if (buzTypeEnum == ACCOUNT_RULE) {
            List<AccountRule> accountRules = pdRuleProductService.queryAccountRules(form);
            List<AccountRuleVo> accountRuleVos = new AccountRuleVoConvertor().convertList(accountRules);
            int accountCount = pdRuleProductService.queryGpsRulesCount(form);
            commonComponent.bindTags(TwoTuple.newInstance(BuzTypeEnum.ACCOUNT_RULE.getIndex(), accountRuleVos), rule -> Integer.valueOf(rule.getRuleSeq()), (rule, tags) -> rule.setTags(tags));
            LOGGER.info("规则关联产品-queryBindRules-业务类型:{},结果:{}", buzTypeEnum.getName(), JSON.toJSON(accountRuleVos));
            return Result.suc(new PageVO<>(form.getDraw(), accountCount, accountRuleVos));
        }
        return Result.suc(new PageVO<>(form.getDraw(), 0, null));
    }


/**
     * 转换函数
    * */
    private void transFrom(SwitchStmt switchStmt) {
        IfStmt ifStmt = buildStmt(switchStmt.getSelector(), switchStmt.getEntries());
        try {
            BlockStmt blockStmt = (BlockStmt) switchStmt.getParentNode().get();
            int index = blockStmt.getStatements().indexOf(switchStmt);
            blockStmt.getStatements().add(index, ifStmt);
            blockStmt.remove(switchStmt);
            System.out.println(switchStmt);
            System.out.println(ifStmt);
        } catch (RuntimeException e) {
            e.printStackTrace();
        }
    }

    /**
     * 得到转换后的列表
     */
    private IfStmt buildStmt(Expression selector, List<SwitchEntry> switchEntries) {
        IfStmt p = null, q = null;
        boolean head = true;
        for (SwitchEntry switchEntry : switchEntries) {

            //生成表达式
            Expression condition = buildCondition(selector, switchEntry);

            //根据表达式生成分支语句
            Statement statement = buildIfStmt(condition, switchEntry);

            //拼接分支语句
            if (statement.isIfStmt()) {
                if (head) {
                    p = statement.asIfStmt();
                    q = p;
                    continue;
                }
                p.setElseStmt(statement.asIfStmt());
                p = statement.asIfStmt();
            }

            //判断是否是default
            if (statement.isBlockStmt()) {
                p.setElseStmt(statement.asBlockStmt());
            }
        }
        return q;
    }

    /**
     * 处理列表
     */
    private List<Statement> sloveStateList(Map<SwitchEntry, Statement> map) {
        List<Statement> statements = new ArrayList<>();
        return statements;
    }

    /**
     * 生成表达式
     */
    private Expression buildCondition(Expression select, SwitchEntry switchEntry) {
        BinaryExpr condition = new BinaryExpr();
        condition.setOperator(BinaryExpr.Operator.EQUALS);
        condition.setLeft(select);
        if(switchEntry.getLabels()==null||switchEntry.getLabels().size()==0){
            return null;
        }
        condition.setRight(switchEntry.getLabels().get(0));
        return condition;
    }


    /**
     * @param condition   if条件
     * @param switchEntry case 分支
     */
    private Statement buildIfStmt(Expression condition, SwitchEntry switchEntry) {
        BlockStmt blockStmt = new BlockStmt();
        if(switchEntry.getStatements().size()==1&&switchEntry.getStatements().get(0).isBlockStmt()){
            blockStmt = switchEntry.getStatements().get(0).asBlockStmt();
        }
        else{
            blockStmt.getStatements().addAll(switchEntry.getStatements());
        }
        if (condition==null) {
            return blockStmt;
        }
        IfStmt ifStmt = new IfStmt();
        ifStmt.setCondition(condition);
        ifStmt.setThenStmt(blockStmt);
        return ifStmt;
    }
}

