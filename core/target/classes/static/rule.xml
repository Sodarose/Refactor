<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<rule>
    <!-- 需求一 -->
    <!--over-->
    <rule-item>
        <rule-name>OverwriteMethodRule</rule-name>
        <description>对于覆写的方法必须加@Override注释</description>
        <className>analysis.rule.OverwriteMethodRule</className>
        <solutionClassName>refactor.refactorimpl.OverwriteMethodRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>对于覆写的方法必须加@Override注释</rule-message>
        <rule-level>1</rule-level>
        <example>
            public interface T {
            void test(int i);
            }

            public class TTest implements T {

            public void test(int i) {

            }

            class Q implements T {
            public void test(int i) {

            }
            }
            }

            class P implements T {
            public void test(int i) {

            }
            }

            class X extends P {
            public void test(int i) {
            super.test(i);
            }
            }

        </example>
    </rule-item>

    <!-- 扫描时处理 不会等待到重构阶段 -->
    <rule-item>
        <rule-name>VariableDeclarationSpecification</rule-name>
        <description>对于部分变量声明或赋值执行更正</description>
        <className>analysis.rule.VariableDeclarationSpecification</className>
        <solutionClassName></solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>${target} 应该这样写${refactor}</rule-message>
        <rule-level>0</rule-level>
        <example>
            示例1:
            Long l = 2l; => Long l = 2L;
            String args[]; => String[] args;
        </example>
    </rule-item>

    <rule-item>
        <rule-name>UnusedImportsRefactor</rule-name>
        <description>清除未使用的导入</description>
        <className>analysis.rule.UnusedImportsRule</className>
        <solutionClassName>refactor.refactorimpl.UnusedImportsRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>该导入未被使用 需要清除</rule-message>
        <rule-level>1</rule-level>
        <example>
            import com.github.javaparser.ast.ImportDeclaration;
            import model.Issue;
            import refactor.AbstractRefactor;

            class xx{
            /*
            * not use that imports
            */
            }
        </example>
    </rule-item>

    <rule-item>
        <rule-name>CodeStyleRule</rule-name>
        <description>大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上</description>
        <className>analysis.rule.CodeStyleRule</className>
        <solutionClassName>refactor.refactorimpl.CodeStyleRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>必须用大括号包裹 即使只有一条语句或空</rule-message>
        <rule-level>1</rule-level>
        <example>
            do:
            xxx
            while(condition);

            if(condtion)
            xxx
            else
            xxx

            while(condition)
            xxxx

            for(init;condition;update)
            xxxx
        </example>
    </rule-item>

    <!--  需求二  -->
    <rule-item>
        <rule-name>ClassNamingShouldBeCamelRule</rule-name>
        <description>类名使用UpperCamelCase风格，必须遵从驼峰形式，</description>
        <className>analysis.rule.ClassNamingShouldBeCamelRule</className>
        <solutionClassName>refactor.refactorimpl.ClassNameRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>类名应遵从驼峰形式</rule-message>
        <rule-level>2</rule-level>
        <example>
            public class TextName
        </example>
    </rule-item>


    <rule-item>
        <rule-name>ClassVariNamingRule</rule-name>
        <description>成员变量名字应遵从小驼峰模式</description>
        <className>analysis.rule.ClassVariNamingRule</className>
        <solutionClassName>refactor.refactorimpl.ClassVariNameRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>成员变量名应遵从小驼峰形式</rule-message>
        <rule-level>2</rule-level>
        <example>
            public class TextName{
            public string textName
            }
        </example>
    </rule-item>


    <rule-item>
        <rule-name>ClassConstantNamingRule</rule-name>
        <description>常量命名应该全部大写</description>
        <className>analysis.rule.ClassConstantNamingRule</className>
        <solutionClassName>refactor.refactorimpl.ContantNameRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>常量命名应该全部大写</rule-message>
        <rule-level>2</rule-level>
        <example>
            public class TextName
            {
            public static final PATTERN="";
            }
        </example>
    </rule-item>


    <rule-item>
        <rule-name>LowerCamelCaseVariableNaming</rule-name>
        <description>方法内变量名应符合小驼峰形式</description>
        <className>analysis.rule.LowerCamelCaseVariableNaming</className>
        <solutionClassName>refactor.refactorimpl.VariableNameRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>方法内变量应符合小驼峰形式</rule-message>
        <rule-level>2</rule-level>
        <example>
            public class TextName
            {
            public void check(){
            String changeKey="";
            }
            }
        </example>
    </rule-item>


    <rule-item>
        <rule-name>MethodNamingShouldBeCamelRule</rule-name>
        <description>方法名应符合小驼峰形式</description>
        <className>analysis.rule.MethodNamingShouldBeCamelRule</className>
        <solutionClassName>refactor.refactorimpl.MethodNameRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>方法命名应该全部大写</rule-message>
        <rule-level>2</rule-level>
        <example>
            public class TextName
            {
            public void checkName(){
            }
            }
        </example>
    </rule-item>


    <rule-item>
        <rule-name>PackageNamingRule</rule-name>
        <description>包命名应该全部小写</description>
        <className>analysis.rule.PackageNamingRule</className>
        <solutionClassName>refactor.refactorimpl.PackageNameRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>包命名应该全部小写</rule-message>
        <rule-level>2</rule-level>
        <example>
            package com.github.javaparser;
            public class TextName
            {

            }
        </example>
    </rule-item>

    <rule-item>
        <rule-name>ParameterNamingRule</rule-name>
        <description>方法的参数命名应符合小驼峰形式</description>
        <className>analysis.rule.ParameterNamingRule</className>
        <solutionClassName>refactor.refactorimpl.ParameterNameRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>方法的参数命名应符合小驼峰形式</rule-message>
        <rule-level>2</rule-level>
        <example>
            public class TextName
            {
            public void checkName(String className)
            {

            }
            }
        </example>
    </rule-item>

    <!-- 需求三 -->


    <rule-item>
        <rule-name>VoidPoolRule</rule-name>
        <description>空表达式for转换为while</description>
        <className>analysis.rule.VoidPoolRule</className>
        <solutionClassName>refactor.refactorimpl.VoidPoolRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>相较于for(;;), while(true)更加的容易使人理解</rule-message>
        <rule-level>6</rule-level>
        <example>
            for(;;){
            ****
            }
        </example>
    </rule-item>


    <rule-item>
        <rule-name>WhileChangeForRule</rule-name>
        <description>while转化为for</description>
        <className>analysis.rule.WhileChangeForRule</className>
        <solutionClassName>refactor.refactorimpl.WhileChangeRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>有些时候while转化成for能够使人更好的理解</rule-message>
        <rule-level>7</rule-level>
        <example>
            int i = 0;
            while(i &lt; 100){
            ****
            ****
            i++;
            }
        </example>
    </rule-item>


    <rule-item>
        <rule-name>IFTransformSwitchRule</rule-name>
        <description>if转换成switch</description>
        <className>analysis.rule.IFTransformSwitchRule</className>
        <solutionClassName>refactor.refactorimpl.IfTransformSwitchRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>if转换成switch性能更高哦</rule-message>
        <rule-level>8</rule-level>
        <example>
            if(x == q){
            xxxx
            }else if(x==p){
            xxxx
            }else if(x==t){
            xxxx
            }else if(x==c){
            xxxx
            }else if(x==z){
            xxxx
            }else if(x==n){
            xxxx
            }else{
            }
        </example>
    </rule-item>

    <rule-item>
        <rule-name>ShallowSwitchRule</rule-name>
        <description>Switch转换为if</description>
        <className>analysis.rule.ShallowSwitchRule</className>
        <solutionClassName>refactor.refactorimpl.ShallowSwitchRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>Switch低于或等于三层是低效的,故将其转换为if语句</rule-message>
        <rule-level>9</rule-level>
        <example>
            switch (empType)
            {
            case ENGINEER:
            return m_basicSalary;
            case SALESMAN:
            return m_basicSalary + m_commission;
            case MANAGER:
            return 2 * m_basicSalary;
            default:
            throw new Exception("no such employee type!");
            }
        </example>
    </rule-item>


    <rule-item>
        <rule-name>DeeplyIfStmtsRule</rule-name>
        <description>if深层嵌套</description>
        <className>analysis.rule.DeeplyIfStmtsRule</className>
        <solutionClassName>refactor.refactorimpl.DeeplyIfStmtsRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>if深层嵌套超过三层</rule-message>
        <rule-level>10</rule-level>
        <example>
            if (i == 1) {
            System.out.println("执行1");
            if (i == 2) {
            System.out.println("执行2");
            if (i == 3) {
            System.out.println("执行3");
            if (i == 4) {
            System.out.println("执行4");
            if (i == 5) {
            System.out.println("执行5");
            if (i == 6) {
            System.out.println("执行6");
            if (i == 7) {
            System.out.println("执行7");
            }
            }
            }
            }
            }
            }
            }
        </example>
    </rule-item>

    <!--需求四-->
    <rule-item>
        <rule-name>ForEachRule</rule-name>
        <description>不要在 foreach 循环里进行元素的 remove/add 操作。</description>
        <className>analysis.rule.ForEachRule</className>
        <solutionClassName></solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator</rule-message>
        <rule-level>5</rule-level>
        <example>
            for (String item : list) {
            if ("1".equals(item)) {
            list.remove(item);
            }
            }
        </example>
    </rule-item>

    <rule-item>
        <rule-name>HashCodeRefactor</rule-name>
        <description>只要重写 equals，就必须重写 hashCode。</description>
        <className>analysis.rule.HashCodeRule</className>
        <solutionClassName></solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>字符串比较应该使用equals</rule-message>
        <rule-level>5</rule-level>
        <example>

        </example>
    </rule-item>

    <rule-item>
        <rule-name>StringComparisonRule</rule-name>
        <description>字符串比较改用equals</description>
        <className>analysis.rule.StringComparisonRule</className>
        <solutionClassName></solutionClassName>
        <rule-status>true</rule-status>
        <rule-message>字符串比较应该使用equals</rule-message>
        <rule-level>0</rule-level>
        <example>
            xxx == "String";
            xxx.equals("String");

            转换为
            "String".equals(xxx);
        </example>
    </rule-item>

    <rule-item>
        <rule-name>SwicthDefaultRule</rule-name>
        <description>对于缺少default的switch进行补充 即使为空</description>
        <className>analysis.rule.SwicthDefaultRule</className>
        <solutionClassName></solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>对于缺少default的switch进行补充 即使为空</rule-message>
        <rule-level>11</rule-level>
        <example>

        </example>
    </rule-item>
</rule>