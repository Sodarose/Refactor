<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<rule>
    <rule-item>
        <rule-name>DeeplyIfStmtsRule</rule-name>
        <description>if深层嵌套</description>
        <className>analysis.rule.DeeplyIfStmtsRule</className>
        <solutionClassName>refactor.refactorimpl.DeeplyIfStmtsRe</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>if深层嵌套超过三层</rule-message>
        <example>
            if (i == 1) {
                System.out.println("执行1");
                if (i == 2) {
                    System.out.println("执行2");
                        if (i == 3) {
                            System.out.println("执行3");
                                if (i == 4) {
                                    System.out.println("执行4");
                                        if (i == 5) {
                                            System.out.println("执行5");
                                                if (i == 6) {
                                                    System.out.println("执行6");
                                                        if (i == 7) {
                                                             System.out.println("执行7");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
        </example>
    </rule-item>

    <rule-item>
        <rule-name>ShallowSwitchRule</rule-name>
        <description>Switch转换为if</description>
        <className>analysis.rule.ShallowSwitchRule</className>
        <solutionClassName>refactor.refactorimpl.ShallowSwitchRefactor</solutionClassName>
        <rule-status>true</rule-status>
        <rule-message>Switch低于或等于三层是低效的,故将其转换为if语句</rule-message>
        <example>
            switch (empType)
            {
                case ENGINEER:
                     return m_basicSalary;
                case SALESMAN:
                    return m_basicSalary + m_commission;
                case MANAGER:
                    return 2 * m_basicSalary;
                default:
                    throw new Exception("no such employee type!");
            }
        </example>
    </rule-item>

    <rule-item>
        <rule-name>VoidPoolRule</rule-name>
        <description>空表达式for转换为while</description>
        <className>analysis.rule.VoidPoolRule</className>
        <solutionClassName>refactor.refactorimpl.VoidPoolRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>相较于for(;;), while(true)更加的容易使人理解</rule-message>
        <example>
           for(;;){
                ****
            }
        </example>
    </rule-item>

    <rule-item>
        <rule-name>WhileChangeForRule</rule-name>
        <description>while转化为for</description>
        <className>analysis.rule.WhileChangeForRule</className>
        <solutionClassName>refactor.refactorimpl.WhileChangeRefactor</solutionClassName>
        <rule-status>false</rule-status>
        <rule-message>有些时候while转化成for能够使人更好的理解</rule-message>
        <example>
            int i = 0;
            while(i &lt; 100){
                ****
                ****
                i++;
            }
        </example>
    </rule-item>

</rule>